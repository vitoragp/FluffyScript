include { print as p } in std;

namespace print
{
	class Foo {
		constructor()
		{}

		constructor(val: i32)
		{}

		fn test(_: i32, _: i32)
		{
		}

		fn main(){}
		fn main(a: i32) {}
		fn main(a: i32, {a: { a: (b, c, d) }}: Foo) {
			let { a: { b: { c: ( e, f ) } } } = foo;

			if let a = foo
			{
				let b = |a, b| {
					let c = |a: i32, {a: { a: { a: b } } }: Foo| {};
				};
			}
			
			let p = new Foo() {
				a: 0,
				b: 0,
			};

			for let a = 0; a < 100 ;  a++
			{
				let b = 0;
			}
			
			while (true)
			{
				let a = 0;
				let b = 0;
			}

			do
			{
				let a = 0;
				let b = 0;
			}
			while (true);

			match foo
			{
				when { a, b, c } -> {},
				when { b: 1 } -> {},
				when _ -> {},
			}
			
			try
			{
				let a = 0;
			}
			catch a : MyException1
			{
			}
			catch a : MyException2
			{
			}
		}
	}
}