include { print } from "stl";
include { * } from "UI";

namespace com.application
{
	export struct User
	{
		let id: u64;
		let name: string;
		let age: u8;
		let weight: fp32;
		
		let factor_wl: fp32;
		let factor_wh: fp64;
		
		let factor_a: i8;
		let factor_ax: u8;
		
		let factor_uv: u16;
		let factor_vv: i16;
		
		let factor_buv: u32;
		let factor_bvv: i32;
		
		let factor_xuv: u64;
		let factor_xvv: i64;
		
		let relationship: map<string, object>;
	}
	
	trait ValidateAgeOfMajority
	{		
		fn validate(): bool;
		static fn validateList(list: self[]): bool;
	}
	
	trait ValidateAgeOfMajority for User
	{
		fn validate(): bool
		{
			return this.age > 18;
		}
		
		static fn validateUsers(list: User[]): bool
		{
			foreach let user in list
			{
				if user.age < 18
				{
					return false;
				}
			}
			return true;
		}
	}

	class MyWindow extends Window implements Clickable
	{		 
		private const title: string = "Minha ";
		private const subTitle: string;
		
		protected let numClicks: u32 = 0;
		protected let numDbClicks: u32 = 0;
		
		protected let gender: i32? = null;
		
		protected let isMale: bool = false;
		protected let isFemale: bool = false;
		
		protected let user: User?;
		
		protected let userMemoryAllocated: u64 = 0; 
		
		protected let icon: object?;
	
		public constructor()
			: subTitle("janela")
		{
			super(title + subTitle);
			this.userMemoryAllocated += sizeof User;
		}
		
		destructor()
		{}
		
		fn testGender(): Result<string, string>
		{
			if this.gender == null
			{
				return Err("Invalid gender");
			}
			return Ok("Valid gender");
		}
		
		virtual fn builder()
		{
			super.builder();
			
			if this.icon?.rounded
			{
				const iconRounded = this.icon as IconRounded;
				iconRounded.radius = 10;
				
				this.addChild(iconRounded);
				
				goto skipLabelBlock;
			}

			this.addChild(
				new Label()
				{
					value: "Selecione seu sexo:"					
				}
			);
			
		skipLabelBlock:
			let maxIt = 10;
			let i = 0;
			
			let err = false;
			let message: string?;
			try
			{
				while i < maxIt
				{				
					if i == 5 && this.gender
					{
						continue;		
					}
					this.add(new Badge(i));
					i++;
				}
	
				i = 0;
				do			
				{				
					if i == 5 && this.gender
					{
						continue;		
					}
					this.add(new Badge(i));
					i++;
				}
				while i < maxIt;
			}
			catch (exception e)
			{
				err = true;
				message = e.message;
			}
			finally
			{
				this.reset(err, message);
			}
						
			this.addChild(
				new Select(GenderOptions.toMap())
				{
					onClick: fn (owner) {
						this.gender = owner?.selected?.index;
						
						if this.user is ValidateAgeOfMajority
						{
							this.user.validate();
						}
						else
						{
							panic("user cannot be validated!");
						}
						
						match testGender()
						{
							when Ok(message) => {},
							when Err(message) => {}
						}
						
						switch this.gender
						{
							case 0:
								isMale = true;
								isFemale = false;
								break;
								
							case 1:
								isMale = false;
								isFemale = true;
								break;
								
							default:
								panic("Unexpected gender option");								
						}
					}
				}
			);
			
			this.addChild(
				new Button("Enviar")
				{
					// Anula o parametro owner.
					onClick: fn (_) {
						if this.gender
						{
							this.close(true, false);
						}
					}
				}
			);
		}
		
		virtual fn click(): void override
		{
			this.numClicks++;
		}
		
		// Nao tipificar o retorno significa ": void".
		virtual fn dbClick() final
		{
			this.numDbClicks++;
		}
	}
	
	interface Clickable
	{
		abstract fn click(): void;
		abstract fn dbClick();		
	}
		
	enum GenderOptions
	{
		Male = "Male",
		Female = "Female"
	}
	
	enum Result<T, E>
	{
		Ok(T),
		Err(E)
	}
}